; OM File Header - Saved 2024/04/19 17:12:58
; (7.04 :patc (om-make-point 180 32) (om-make-point 50 50) (om-make-point 839 648) "" 183 0 nil "2024/04/19 17:12:55")
; End File Header
(in-package :om)(load-lib-for (quote ("OM-Screamer")))(setf *om-current-persistent* (om-load-patch1 "04-force-function" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 609 315) (om-make-point 190 30) "static-ordering random-force" "\"static-ordering random-force\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 154 336) (om-make-point 255 30) "static-ordering divide-and-conquer-force" "\"static-ordering divide-and-conquer-force\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 183 3) (om-make-point 178 30) "static-ordering linear-force" "\"static-ordering linear-force\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 594 8) (om-make-point 71 30) "reorder" "\"reorder\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FORCE-FUNCTION 4" (quote force-function) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "ordering-force-functions" "FORCE-FUNCTION" "reorder" (list (list "static-ordering linear-force" "static-ordering linear-force") (list "static-ordering divide-and-conquer-force" "static-ordering divide-and-conquer-force") (list "static-ordering random-force" "static-ordering random-force") (list "reorder" "reorder"))) (om-load-inputkeyword (quote input-keyword) "domain-size, range-size or score-position" "cost-function" (quote :cost-function) "domain-size" (list (list "domain-size" "domain-size") (list "range-size" "range-size") (list "score-position" "score-position"))) (om-load-inputkeyword (quote input-keyword) "terminate-function" "terminate?" (quote :terminate?) "(declare (ignore x))" (list (list "(declare (ignore x))" "(declare (ignore x))") (list "(< x 1e-6)" "(< x 1e-6)"))) (om-load-inputkeyword (quote input-keyword) "> or <" "order" (quote :order) ">" (list (list ">" ">") (list "<" "<"))) (om-load-inputkeyword (quote input-keyword) "linear-force, divide-and-conquer-force or random-force" "reorder-force-function" (quote :reorder-force-function) "random-force" (list (list "linear-force" "linear-force") (list "divide-and-conquer-force" "divide-and-conquer-force") (list "random-force" "random-force"))))) (om-make-point 587 52) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SCREAMER-SOLVER 4" (quote screamer-solver) (quote ((om-load-inputfun (quote input-funbox) "variable or list" "VARIABLES" nil) (om-load-inputkeyword (quote input-keyword) "one-value, all-values, listener, n-values, ith-value or best-value" "screamer-valuation" (quote :screamer-valuation) "all-values" (list (list "one-value" "one-value") (list "all-values" "all-values") (list "listener" "listener") (list "n-values" "n-values") (list "ith-value" "ith-value") (list "best-value" "best-value"))) (om-load-inputkeyword (quote input-keyword) "ordering-force-functions" "force-function" (quote :force-function) "static-ordering linear-force" nil))) (om-make-point 532 146) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SCREAMER-VARIABLE 4" (quote screamer-variable) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "screamer-variable" "VAR" "an-integer-betweenv" (list (list "an-integer-betweenv" "an-integer-betweenv") (list "a-member-ofv" "a-member-ofv") (list "a-random-member-ofv" "a-random-member-ofv") (list "an-integerv" "an-integerv") (list "an-integer-abovev" "an-integer-abovev") (list "an-integer-belowv" "an-integer-belowv") (list "a-realv" "a-realv") (list "a-real-abovev" "a-real-abovev") (list "a-real-belowv" "a-real-belowv") (list "a-real-betweenv" "a-real-betweenv") (list "a-numberv" "a-numberv") (list "a-booleanv" "a-booleanv"))) (om-load-inputfun (quote input-funbox) "list" "ARGS" (list 60 72)))) (om-make-point 475 50) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FORCE-FUNCTION 3" (quote force-function) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "ordering-force-functions" "FORCE-FUNCTION" "static-ordering random-force" (list (list "static-ordering linear-force" "static-ordering linear-force") (list "static-ordering divide-and-conquer-force" "static-ordering divide-and-conquer-force") (list "static-ordering random-force" "static-ordering random-force") (list "reorder" "reorder"))))) (om-make-point 571 345) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SCREAMER-SOLVER 3" (quote screamer-solver) (quote ((om-load-inputfun (quote input-funbox) "variable or list" "VARIABLES" nil) (om-load-inputkeyword (quote input-keyword) "one-value, all-values, listener, n-values, ith-value or best-value" "screamer-valuation" (quote :screamer-valuation) "all-values" (list (list "one-value" "one-value") (list "all-values" "all-values") (list "listener" "listener") (list "n-values" "n-values") (list "ith-value" "ith-value") (list "best-value" "best-value"))) (om-load-inputkeyword (quote input-keyword) "ordering-force-functions" "force-function" (quote :force-function) "static-ordering linear-force" nil))) (om-make-point 517 439) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SCREAMER-VARIABLE 3" (quote screamer-variable) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "screamer-variable" "VAR" "an-integer-betweenv" (list (list "an-integer-betweenv" "an-integer-betweenv") (list "a-member-ofv" "a-member-ofv") (list "a-random-member-ofv" "a-random-member-ofv") (list "an-integerv" "an-integerv") (list "an-integer-abovev" "an-integer-abovev") (list "an-integer-belowv" "an-integer-belowv") (list "a-realv" "a-realv") (list "a-real-abovev" "a-real-abovev") (list "a-real-belowv" "a-real-belowv") (list "a-real-betweenv" "a-real-betweenv") (list "a-numberv" "a-numberv") (list "a-booleanv" "a-booleanv"))) (om-load-inputfun (quote input-funbox) "list" "ARGS" (list 60 72)))) (om-make-point 459 343) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FORCE-FUNCTION 2" (quote force-function) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "ordering-force-functions" "FORCE-FUNCTION" "static-ordering divide-and-conquer-force" (list (list "static-ordering linear-force" "static-ordering linear-force") (list "static-ordering divide-and-conquer-force" "static-ordering divide-and-conquer-force") (list "static-ordering random-force" "static-ordering random-force") (list "reorder" "reorder"))))) (om-make-point 148 367) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SCREAMER-SOLVER 2" (quote screamer-solver) (quote ((om-load-inputfun (quote input-funbox) "variable or list" "VARIABLES" nil) (om-load-inputkeyword (quote input-keyword) "one-value, all-values, listener, n-values, ith-value or best-value" "screamer-valuation" (quote :screamer-valuation) "all-values" (list (list "one-value" "one-value") (list "all-values" "all-values") (list "listener" "listener") (list "n-values" "n-values") (list "ith-value" "ith-value") (list "best-value" "best-value"))) (om-load-inputkeyword (quote input-keyword) "ordering-force-functions" "force-function" (quote :force-function) "static-ordering linear-force" nil))) (om-make-point 92 460) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SCREAMER-VARIABLE 2" (quote screamer-variable) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "screamer-variable" "VAR" "an-integer-betweenv" (list (list "an-integer-betweenv" "an-integer-betweenv") (list "a-member-ofv" "a-member-ofv") (list "a-random-member-ofv" "a-random-member-ofv") (list "an-integerv" "an-integerv") (list "an-integer-abovev" "an-integer-abovev") (list "an-integer-belowv" "an-integer-belowv") (list "a-realv" "a-realv") (list "a-real-abovev" "a-real-abovev") (list "a-real-belowv" "a-real-belowv") (list "a-real-betweenv" "a-real-betweenv") (list "a-numberv" "a-numberv") (list "a-booleanv" "a-booleanv"))) (om-load-inputfun (quote input-funbox) "list" "ARGS" (list 60 72)))) (om-make-point 36 365) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FORCE-FUNCTION" (quote force-function) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "ordering-force-functions" "FORCE-FUNCTION" "static-ordering linear-force" (list (list "static-ordering linear-force" "static-ordering linear-force") (list "static-ordering divide-and-conquer-force" "static-ordering divide-and-conquer-force") (list "static-ordering random-force" "static-ordering random-force") (list "reorder" "reorder"))))) (om-make-point 145 33) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SCREAMER-VARIABLE" (quote screamer-variable) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "screamer-variable" "VAR" "an-integer-betweenv" (list (list "an-integer-betweenv" "an-integer-betweenv") (list "a-member-ofv" "a-member-ofv") (list "a-random-member-ofv" "a-random-member-ofv") (list "an-integerv" "an-integerv") (list "an-integer-abovev" "an-integer-abovev") (list "an-integer-belowv" "an-integer-belowv") (list "a-realv" "a-realv") (list "a-real-abovev" "a-real-abovev") (list "a-real-belowv" "a-real-belowv") (list "a-real-betweenv" "a-real-betweenv") (list "a-numberv" "a-numberv") (list "a-booleanv" "a-booleanv"))) (om-load-inputfun (quote input-funbox) "list" "ARGS" (list 60 72)))) (om-make-point 33 31) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SCREAMER-SOLVER" (quote screamer-solver) (quote ((om-load-inputfun (quote input-funbox) "variable or list" "VARIABLES" nil) (om-load-inputkeyword (quote input-keyword) "one-value, all-values, listener, n-values, ith-value or best-value" "screamer-valuation" (quote :screamer-valuation) "all-values" (list (list "one-value" "one-value") (list "all-values" "all-values") (list "listener" "listener") (list "n-values" "n-values") (list "ith-value" "ith-value") (list "best-value" "best-value"))) (om-load-inputkeyword (quote input-keyword) "ordering-force-functions" "force-function" (quote :force-function) "static-ordering linear-force" nil))) (om-make-point 91 127) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 4 0 nil 0) (6 0 5 0 nil 0) (4 0 5 2 nil 0) (0 0 7 0 nil 0) (9 0 8 0 nil 0) (7 0 8 2 nil 0) (1 0 10 0 nil 0) (12 0 11 0 nil 0) (10 0 11 2 nil 0) (2 0 13 0 nil 0) (14 0 15 0 nil 0) (13 0 15 2 nil 0))) nil 7.04))
