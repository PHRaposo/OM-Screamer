; OM File Header - Saved 2024/04/19 17:12:01
; (7.04 :patc (om-make-point 57 168) (om-make-point 50 50) (om-make-point 1165 513) "" 183 0 nil "2024/04/19 17:11:57")
; End File Header
(in-package :om)(load-lib-for (quote ("OM-Screamer")))(setf *om-current-persistent* (om-load-patch1 "02-constraints" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 101 30) (quote "map-solutions") nil (om-make-point 904 274) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 95 30) (quote "constraint-all") nil (om-make-point 610 275) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 95 30) (quote "p-constraints") nil (om-make-point 337 277) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 82 30) (quote "constraints") nil (om-make-point 111 271) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 1117 116) (om-make-point 38 30) (quote :all) ":all" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 778 120) (om-make-point 38 30) (quote :all) ":all" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 465 105) (om-make-point 38 30) (quote :all) ":all" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "constraint-all" (om-load-patch-abs1 "constraint-all" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 264 218) (om-make-point 281 30) (list 7200 7100 6900 6700 6500 6400 6200 6000) "(7200 7100 6900 6700 6500 6400 6200 6000)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ALL-MEMBERSV 2" (quote all-membersv) (quote ((om-load-inputfun (quote input-funbox) "variable or list" "LIST" (list 11 5 2)) (om-load-inputfun (quote input-funbox) "variable or list" "SEQUENCE" (list 0 2 4 5 7 9 11)))) (om-make-point 212 248) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 112 202) (om-make-point 59 30) (list 3 4 7) "(3 4 7)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MOD12V" (quote mod12v) (quote ((om-load-inputfun (quote input-funbox) "variable, number or list" "VAR" -8))) (om-make-point 47 178) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X->DXV" (quote x->dxv) (quote ((om-load-inputfun (quote input-funbox) "variable or list of variables" "LISTV" (list 1 2 3 4 5)))) (om-make-point 51 114) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ANDV" (quote screamer:andv) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 156 317) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 148 423) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ASSERT!" (quote screamer:assert!) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 149 372) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 218 37) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 89 32) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ALL-MEMBERSV" (quote all-membersv) (quote ((om-load-inputfun (quote input-funbox) "variable or list" "LIST" (list 11 5 2)) (om-load-inputfun (quote input-funbox) "variable or list" "SEQUENCE" (list 0 2 4 5 7 9 11)))) (om-make-point 75 251) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((8 0 1 0 nil 0) (0 0 1 1 nil 0) (4 0 3 0 nil 0) (9 0 4 0 nil 0) (10 0 5 0 nil 0) (1 0 5 1 nil 0) (7 0 6 0 nil 0) (5 0 7 0 nil 0) (3 0 10 0 nil 0) (2 0 10 1 nil 0))) 7.04 nil "" (om-make-point 200 200) (om-make-point 594 501)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 687 73) nil (list nil) "l" "constraint-all"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "first->v-64" (om-load-patch-abs1 "first->v-64" (quote ((let ((box (om-load-boxcall (quote lispfun) "FIRST 2" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 86 127) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 105 252) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 158 145) (om-make-point 34 30) 64 "64" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 59 69) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM>" (quote om>) (quote ((om-load-inputfun (quote input-funbox) "a number" "NUM1" 0) (om-load-inputfun (quote input-funbox) "a number" "NUM2" 1))) (om-make-point 119 204) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 82 0) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (4 0 1 0 nil 0) (5 0 3 0 nil 0) (0 0 4 0 nil 0) (2 0 4 1 nil 0))) 7.04 nil "" (om-make-point 200 200) (om-make-point 332 414)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 1049 74) nil (list nil) "l" "first->v-64"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "constraint-all 2" (om-load-patch-abs1 "constraint-all" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 267 145) (om-make-point 157 47) (list 7200 7100 6900 6700 6500 6400 6200 6000) "(7200 7100 6900 6700 6500 6400 6200 6000)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ALL-MEMBERSV 2" (quote all-membersv) (quote ((om-load-inputfun (quote input-funbox) "variable or list" "LIST" (list 11 5 2)) (om-load-inputfun (quote input-funbox) "variable or list" "SEQUENCE" (list 0 2 4 5 7 9 11)))) (om-make-point 212 234) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 112 188) (om-make-point 59 30) (list 3 4 7) "(3 4 7)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MOD12V" (quote mod12v) (quote ((om-load-inputfun (quote input-funbox) "variable, number or list" "VAR" -8))) (om-make-point 47 164) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X->DXV" (quote x->dxv) (quote ((om-load-inputfun (quote input-funbox) "variable or list of variables" "LISTV" (list 1 2 3 4 5)))) (om-make-point 51 100) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ANDV" (quote screamer:andv) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 156 317) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 148 423) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ASSERT!" (quote screamer:assert!) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 149 372) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 218 37) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 59 33) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ALL-MEMBERSV" (quote all-membersv) (quote ((om-load-inputfun (quote input-funbox) "variable or list" "LIST" (list 11 5 2)) (om-load-inputfun (quote input-funbox) "variable or list" "SEQUENCE" (list 0 2 4 5 7 9 11)))) (om-make-point 75 237) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((8 0 1 0 nil 0) (0 0 1 1 nil 0) (4 0 3 0 nil 0) (9 0 4 0 nil 0) (10 0 5 0 nil 0) (1 0 5 1 nil 0) (7 0 6 0 nil 0) (5 0 7 0 nil 0) (3 0 10 0 nil 0) (2 0 10 1 nil 0))) 7.04 nil "" (om-make-point 200 200) (om-make-point 454 511)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 966 67) nil (list nil) "l" "constraint-all"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "*v-100 2" (om-load-patch-abs1 "*v-100" (quote ((let ((box (om-load-boxcall (quote genfun) "OM*V" (quote om*v) (quote ((om-load-inputfun (quote input-funbox) "variable, number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "variable, number or list" "ARG2" 0))) (om-make-point 151 147) (om-make-point 38 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 146 227) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 187 94) (om-make-point 41 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 118 43) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (2 0 0 1 nil 0) (0 0 1 0 nil 0))) 7.04 nil "" (om-make-point 200 200) (om-make-point 380 384)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 911 67) nil (list nil) "l" "*v-100"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SCREAMER-SOLVER 4" (quote screamer-solver) (quote ((om-load-inputfun (quote input-funbox) "variable or list" "VARIABLES" nil) (om-load-inputkeyword (quote input-keyword) "propagation-variables<lambda-patch>" "p-variables" (quote :p-variables) nil nil) (om-load-inputkeyword (quote input-keyword) "constraints-all<lambda-patch>" "constraints-all" (quote :constraints-all) nil nil) (om-load-inputkeyword (quote input-keyword) "map-solutions<lambda-patch>" "map-solutions" (quote :map-solutions) nil nil) (om-load-inputkeyword (quote input-keyword) "list" "output" (quote :output) nil nil))) (om-make-point 901 165) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LIST-OFVS 3" (quote list-ofvs) (quote ((om-load-inputfun (quote input-funbox) "integer" "N-VARS" 3) (om-load-inputfunmenu1 (quote input-funmenu) "screamer-variable" "VARIABLES" "an-integer-betweenv" (list (list "an-integer-betweenv" "an-integer-betweenv") (list "a-member-ofv" "a-member-ofv") (list "a-random-member-ofv" "a-random-member-ofv") (list "an-integerv" "an-integerv") (list "an-integer-abovev" "an-integer-abovev") (list "an-integer-belowv" "an-integer-belowv") (list "a-realv" "a-realv") (list "a-real-abovev" "a-real-abovev") (list "a-real-belowv" "a-real-belowv") (list "a-real-betweenv" "a-real-betweenv") (list "a-numberv" "a-numberv") (list "a-booleanv" "a-booleanv"))) (om-load-inputfun (quote input-funbox) "list" "ARGS" (list 60 72)))) (om-make-point 845 62) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SCREAMER-SOLVER 3" (quote screamer-solver) (quote ((om-load-inputfun (quote input-funbox) "variable or list" "VARIABLES" nil) (om-load-inputkeyword (quote input-keyword) "propagation-variables<lambda-patch>" "p-variables" (quote :p-variables) nil nil) (om-load-inputkeyword (quote input-keyword) "constraints-all<lambda-patch>" "constraints-all" (quote :constraints-all) nil nil) (om-load-inputkeyword (quote input-keyword) "list" "output" (quote :output) nil nil))) (om-make-point 608 165) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "*v-100" (om-load-patch-abs1 "*v-100" (quote ((let ((box (om-load-boxcall (quote genfun) "OM*V" (quote om*v) (quote ((om-load-inputfun (quote input-funbox) "variable, number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "variable, number or list" "ARG2" 0))) (om-make-point 151 147) (om-make-point 38 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 146 227) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 187 94) (om-make-point 41 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 118 43) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (2 0 0 1 nil 0) (0 0 1 0 nil 0))) 7.04 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 634 68) nil (list nil) "l" "*v-100"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LIST-OFVS 2" (quote list-ofvs) (quote ((om-load-inputfun (quote input-funbox) "integer" "N-VARS" 3) (om-load-inputfunmenu1 (quote input-funmenu) "screamer-variable" "VARIABLES" "an-integer-betweenv" (list (list "an-integer-betweenv" "an-integer-betweenv") (list "a-member-ofv" "a-member-ofv") (list "a-random-member-ofv" "a-random-member-ofv") (list "an-integerv" "an-integerv") (list "an-integer-abovev" "an-integer-abovev") (list "an-integer-belowv" "an-integer-belowv") (list "a-realv" "a-realv") (list "a-real-abovev" "a-real-abovev") (list "a-real-belowv" "a-real-belowv") (list "a-real-betweenv" "a-real-betweenv") (list "a-numberv" "a-numberv") (list "a-booleanv" "a-booleanv"))) (om-load-inputfun (quote input-funbox) "list" "ARGS" (list 60 72)))) (om-make-point 567 63) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ASSERT!-ALL-DIFFERENTV" (quote om-screamer::assert!-all-differentv) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 383 36) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "*v-100" (om-load-patch-abs1 "*v-100" (quote ((let ((box (om-load-boxcall (quote genfun) "OM*V" (quote om*v) (quote ((om-load-inputfun (quote input-funbox) "variable, number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "variable, number or list" "ARG2" 0))) (om-make-point 151 147) (om-make-point 38 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 146 227) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 187 94) (om-make-point 41 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 118 43) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (2 0 0 1 nil 0) (0 0 1 0 nil 0))) 7.04 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 332 61) nil (list nil) "l" "*v-100"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LIST-OFVS" (quote list-ofvs) (quote ((om-load-inputfun (quote input-funbox) "integer" "N-VARS" 3) (om-load-inputfunmenu1 (quote input-funmenu) "screamer-variable" "VARIABLES" "an-integer-betweenv" (list (list "an-integer-betweenv" "an-integer-betweenv") (list "a-member-ofv" "a-member-ofv") (list "a-random-member-ofv" "a-random-member-ofv") (list "an-integerv" "an-integerv") (list "an-integer-abovev" "an-integer-abovev") (list "an-integer-belowv" "an-integer-belowv") (list "a-realv" "a-realv") (list "a-real-abovev" "a-real-abovev") (list "a-real-belowv" "a-real-belowv") (list "a-real-betweenv" "a-real-betweenv") (list "a-numberv" "a-numberv") (list "a-booleanv" "a-booleanv"))) (om-load-inputfun (quote input-funbox) "list" "ARGS" (list 60 72)))) (om-make-point 267 53) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SCREAMER-SOLVER 2" (quote screamer-solver) (quote ((om-load-inputfun (quote input-funbox) "variable or list" "VARIABLES" nil) (om-load-inputkeyword (quote input-keyword) "propagation-variables<lambda-patch>" "p-variables" (quote :p-variables) nil nil) (om-load-inputkeyword (quote input-keyword) "propagation-constraints<lambda-patch>" "p-constraints" (quote :p-constraints) nil nil) (om-load-inputkeyword (quote input-keyword) "list" "output" (quote :output) nil nil))) (om-make-point 326 157) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) ">v-64" (om-load-patch-abs1 ">v-64" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 144 254) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) ">V" (quote screamer:>v) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 157 127) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 150 17) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 184 83) (om-make-point 34 30) 64 "64" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ASSERT!" (quote screamer:assert!) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 145 188) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 0 0 nil 0) (2 0 1 0 nil 0) (3 0 1 1 nil 0) (1 0 4 0 nil 0))) 7.04 nil "" (om-make-point 200 200) (om-make-point 322 418)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 173 50) nil (list nil) "l" ">v-64"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SCREAMER-SOLVER" (quote screamer-solver) (quote ((om-load-inputfun (quote input-funbox) "variable or list" "VARIABLES" nil) (om-load-inputkeyword (quote input-keyword) "constraint<lambda-patch> or list" "constraints" (quote :constraints) nil nil))) (om-make-point 95 150) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SCREAMER-VARIABLE" (quote screamer-variable) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "screamer-variable" "VAR" "an-integer-betweenv" (list (list "an-integer-betweenv" "an-integer-betweenv") (list "a-member-ofv" "a-member-ofv") (list "a-random-member-ofv" "a-random-member-ofv") (list "an-integerv" "an-integerv") (list "an-integer-abovev" "an-integer-abovev") (list "an-integer-belowv" "an-integer-belowv") (list "a-realv" "a-realv") (list "a-real-abovev" "a-real-abovev") (list "a-real-belowv" "a-real-belowv") (list "a-real-betweenv" "a-real-betweenv") (list "a-numberv" "a-numberv") (list "a-booleanv" "a-booleanv"))) (om-load-inputfun (quote input-funbox) "list" "ARGS" (list 60 72)))) (om-make-point 45 48) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((12 0 11 0 nil 0) (10 0 11 1 nil 0) (9 0 11 2 nil 0) (8 0 11 3 nil 0) (4 0 11 4 nil 0) (15 0 13 0 nil 0) (14 0 13 1 nil 0) (7 0 13 2 nil 0) (5 0 13 3 nil 0) (18 0 19 0 nil 0) (17 0 19 1 nil 0) (16 0 19 2 nil 0) (6 0 19 3 nil 0) (22 0 21 0 nil 0) (20 0 21 1 nil 0))) nil 7.04))
