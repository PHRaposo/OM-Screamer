; OM File Header - Saved 2024/04/11 19:24:23
; (7.04 :patc (om-make-point 46 45) (om-make-point 168 161) (om-make-point 1126 533) "" 183 0 nil "2024/04/10 14:20:05")
; End File Header
(in-package :om)(load-lib-for (quote ("OM-Screamer")))(setf *om-current-persistent* (om-load-patch1 "01-main-functions" (quote ((let ((box (om-load-boxcall (quote genfun) "SET-CLASSPV?" (quote om-screamer::set-classpv?) (quote ((om-load-inputfun (quote input-funbox) "list of screamer variables => midics" "VARS" (list nil)) (om-load-inputfun (quote input-funbox) "fn or integers" "PC-SET" (quote |3-11B|)))) (om-make-point 711 78) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*V" (quote om*v) (quote ((om-load-inputfun (quote input-funbox) "variable, number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "variable, number or list" "ARG2" 0))) (om-make-point 554 69) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM/V" (quote om/v) (quote ((om-load-inputfun (quote input-funbox) "variable, number or list" "ARG1" 1) (om-load-inputfun (quote input-funbox) "variable, number or list" "ARG2" 1))) (om-make-point 609 69) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*V" (quote om*v) (quote ((om-load-inputfun (quote input-funbox) "variable, number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "variable, number or list" "ARG2" 0))) (om-make-point 554 69) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-V" (quote om-v) (quote ((om-load-inputfun (quote input-funbox) "variable, number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "variable, number or list" "ARG2" 0))) (om-make-point 501 67) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+V" (quote om+v) (quote ((om-load-inputfun (quote input-funbox) "variable, number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "variable, number or list" "ARG2" 0))) (om-make-point 452 67) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ALL-DIFFV" (quote all-diffv) (quote ((om-load-inputfun (quote input-funbox) "list" "LIST" nil))) (om-make-point 516 379) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "NOT-INTERSECTIONV" (quote not-intersectionv) (quote ((om-load-inputfun (quote input-funbox) "list" "LIST1" (list 0 2 4)) (om-load-inputfun (quote input-funbox) "list" "LIST2" (list 1 3 5)))) (om-make-point 548 303) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X->DX-ABSV" (quote x->dx-absv) (quote ((om-load-inputfun (quote input-funbox) "variable or list of variables" "LISTV" (list 1 2 3 4 5)))) (om-make-point 502 210) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DX->XV" (quote dx->xv) (quote ((om-load-inputfun (quote input-funbox) "variable or number" "START" 0) (om-load-inputfun (quote input-funbox) "variable, list of variables or list" "LISTV" (list 1 2 3 4 5)))) (om-make-point 592 127) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X->DXV" (quote x->dxv) (quote ((om-load-inputfun (quote input-funbox) "variable or list of variables" "LISTV" (list 1 2 3 4 5)))) (om-make-point 517 126) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ALL-MEMBERSV 2" (quote all-membersv) (quote ((om-load-inputfun (quote input-funbox) "variable or list" "LIST" (list 11 5 2)) (om-load-inputfun (quote input-funbox) "variable or list" "SEQUENCE" (list 0 2 4 5 7 9 11)))) (om-make-point 456 304) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-ABSV" (quote om-absv) (quote ((om-load-inputfun (quote input-funbox) "variable, number or list" "VAR" -8))) (om-make-point 435 210) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MC->PCV" (quote mc->pcv) (quote ((om-load-inputfun (quote input-funbox) "variable, number or list" "VAR" 6000))) (om-make-point 582 222) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MOD12V 2" (quote mod12v) (quote ((om-load-inputfun (quote input-funbox) "variable, number or list" "VAR" -8))) (om-make-point 438 126) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "APPLY-CONTV 2" (quote apply-contv) (quote ((om-load-inputfun (quote input-funbox) "patch in lambda mode" "CS" nil) (om-load-inputfunmenu1 (quote input-funmenu) "string" "MODE" "atom" (list (list "atom" "atom") (list "list" "list"))) (om-load-inputfunmenu1 (quote input-funmenu) "string" "RECURSIVE?" "off" (list (list "off" "off") (list "n-inputs" "n-inputs") (list "car-cdr" "car-cdr"))) (om-load-inputfun (quote input-funbox) "list of variables" "VARS" nil))) (om-make-point 307 62) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FUNCALLV-REC-CAR-CDR" (quote om-screamer::funcallv-rec-car-cdr) (quote ((om-load-inputfun (quote input-funbox) "FN" "FN" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 285 350) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FUNCALLV-REC" (quote om-screamer::funcallv-rec) (quote ((om-load-inputfun (quote input-funbox) "FN" "FN" nil) (om-load-inputfun (quote input-funbox) "TREE" "TREE" nil))) (om-make-point 309 295) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "APPLY-REC" (quote om-screamer::apply-rec) (quote ((om-load-inputfun (quote input-funbox) "FN" "FN" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 314 162) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ASSERT!-APPLY-REC" (quote om-screamer::assert!-apply-rec) (quote ((om-load-inputfun (quote input-funbox) "FN" "FN" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 293 228) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MODV" (quote om-screamer::modv) (quote ((om-load-inputfun (quote input-funbox) "N" "N" nil) (om-load-inputfun (quote input-funbox) "D" "D" nil))) (om-make-point 1032 285) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ALL-ROTATIONS" (quote om-screamer::all-rotations) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 1015 150) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SMAT-TRANS" (quote om-screamer::smat-trans) (quote ((om-load-inputfun (quote input-funbox) "LISTS" "LISTS" nil))) (om-make-point 1018 214) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SC-SUBSETS" (quote om-screamer::sc-subsets) (quote ((om-load-inputfun (quote input-funbox) "fn symbol" "FN" (quote |6-27A|)))) (om-make-point 884 270) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SUB/SUPERSETS" (quote om-screamer::sub/supersets) (quote ((om-load-inputfun (quote input-funbox) "SC" "SC" (quote |4-Z15A|)) (om-load-inputfun (quote input-funbox) "card" "CARD" 9))) (om-make-point 876 177) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SC-INFO" (quote om-screamer::sc-info) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "mode" "MODE" (quote :prime) (list (list "prime" (quote :prime)) (list "icv" (quote :icv)) (list "member-sets" (quote :member-sets)) (list "complement-pcs" (quote :complement-pcs)))) (om-load-inputfun (quote input-funbox) "SC" "SC" (quote |4-Z15A|)))) (om-make-point 804 271) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SCS-CARD" (quote om-screamer::scs-card) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "integer" "CARD" 6 (list (list "1" 1) (list "2" 2) (list "3" 3) (list "4" 4) (list "5" 5) (list "6" 6) (list "7" 7) (list "8" 8) (list "9" 9) (list "10" 10) (list "11" 11) (list "12" 12))))) (om-make-point 801 175) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SC+OFF" (quote om-screamer::sc+off) (quote ((om-load-inputfun (quote input-funbox) "midics" "MIDICS" (list 6000 6100)))) (om-make-point 725 270) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SC-NAME" (quote om-screamer::sc-name) (quote ((om-load-inputfun (quote input-funbox) "midics" "MIDICS" (list 6000 6100)))) (om-make-point 720 176) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MEMBER-OF-SCV?" (quote om-screamer::member-of-scv?) (quote ((om-load-inputfun (quote input-funbox) "list of screamer variables" "VARS" (list nil)) (om-load-inputfun (quote input-funbox) "list of set-classes<fn>" "SC-LIST" (list 0 4 7)) (om-load-inputfunmenu1 (quote input-funmenu) "pcs or midics" "MODE" "pcs" (list (list "pcs" "pcs") (list "midics" "midics"))))) (om-make-point 872 76) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SUB-SETPV?" (quote om-screamer::sub-setpv?) (quote ((om-load-inputfun (quote input-funbox) "list of screamer variables => (integers-betweenv 0 11)" "VARS" (list nil)) (om-load-inputfun (quote input-funbox) "fn or integers" "PC-SET" (quote |6-27A|)))) (om-make-point 795 75) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LIST-OFVS" (quote list-ofvs) (quote ((om-load-inputfun (quote input-funbox) "integer" "N-VARS" 3) (om-load-inputfunmenu1 (quote input-funmenu) "screamer-variable" "VARIABLES" "an-integer-betweenv" (list (list "an-integer-betweenv" "an-integer-betweenv") (list "a-member-ofv" "a-member-ofv") (list "a-random-member-ofv" "a-random-member-ofv") (list "an-integerv" "an-integerv") (list "an-integer-abovev" "an-integer-abovev") (list "an-integer-belowv" "an-integer-belowv") (list "a-realv" "a-realv") (list "a-real-abovev" "a-real-abovev") (list "a-real-belowv" "a-real-belowv") (list "a-real-betweenv" "a-real-betweenv") (list "a-numberv" "a-numberv") (list "a-booleanv" "a-booleanv"))))) (om-make-point 184 159) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SCREAMER-VARIABLE" (quote screamer-variable) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "screamer-variable" "VAR" "an-integer-betweenv" (list (list "an-integer-betweenv" "an-integer-betweenv") (list "a-member-ofv" "a-member-ofv") (list "a-random-member-ofv" "a-random-member-ofv") (list "an-integerv" "an-integerv") (list "an-integer-abovev" "an-integer-abovev") (list "an-integer-belowv" "an-integer-belowv") (list "a-realv" "a-realv") (list "a-real-abovev" "a-real-abovev") (list "a-real-belowv" "a-real-belowv") (list "a-real-betweenv" "a-real-betweenv") (list "a-numberv" "a-numberv") (list "a-booleanv" "a-booleanv"))))) (om-make-point 158 65) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SCREAMER-DOC" (quote screamer-doc) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "package::function-name" "FUNCTION" "solution" (list (list "solution" "solution") (list "static-ordering" "static-ordering") (list "reorder" "reorder") (list "linear-force" "linear-force") (list "divide-and-conquer-force" "divide-and-conquer-force") (list "domain-size" "domain-size") (list "range-size" "range-size"))))) (om-make-point 27 255) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SCREAMER-SOLVER" (quote screamer-solver) (quote ((om-load-inputfun (quote input-funbox) "variable or list" "VARIABLES" nil) (om-load-inputkeyword (quote input-keyword) "propagation-variables<lambda-patch>" "P-VARIABLES" (quote :p-variables) nil nil) (om-load-inputkeyword (quote input-keyword) "constraint<lambda-patch> or list" "CONSTRAINTS" (quote :constraints) nil nil) (om-load-inputkeyword (quote input-keyword) "propagation-constraints<lambda-patch>" "P-CONSTRAINTS" (quote :p-constraints) nil nil) (om-load-inputkeyword (quote input-keyword) "one-value, all-values, listener, n-values, ith-value or best-value" "SCREAMER-VALUATION" (quote :screamer-valuation) "one-value" nil) (om-load-inputkeyword (quote input-keyword) "ordering-force-functions" "FORCE-FUNCTION" (quote :force-function) "static-ordering linear-force" nil))) (om-make-point 25 64) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LIST-OF-CHORDS-INV" (quote list-of-chords-inv) (quote ((om-load-inputfun (quote input-funbox) "list" "N-CHORDS" (list 3 4 3)) (om-load-inputfun (quote input-funbox) "list" "DOMAIN" (list 6000 6200 6400 6500 6700 6900 7100 7200)))) (om-make-point 157 255) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LIST-OF-LISTS-OFV" (quote list-of-lists-ofv) (quote ((om-load-inputfun (quote input-funbox) "list" "N-VARS" (list 3 4 3)) (om-load-inputfunmenu1 (quote input-funmenu) "screamer-variable" "VARIABLES" "an-integer-betweenv" (list (list "an-integer-betweenv" "an-integer-betweenv") (list "a-member-ofv" "a-member-ofv") (list "a-random-member-ofv" "a-random-member-ofv") (list "an-integerv" "an-integerv") (list "an-integer-abovev" "an-integer-abovev") (list "an-integer-belowv" "an-integer-belowv") (list "a-realv" "a-realv") (list "a-real-abovev" "a-real-abovev") (list "a-real-below" "a-real-below") (list "a-real-betweenv" "a-real-betweenv") (list "a-numberv" "a-numberv") (list "a-booleanv" "a-booleanv"))))) (om-make-point 162 346) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FORCE-FUNCTION" (quote force-function) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "ordering-force-functions" "FORCE-FUNCTION" "static-ordering linear-force" (list (list "static-ordering linear-force" "static-ordering linear-force") (list "static-ordering divide-and-conquer-force" "static-ordering divide-and-conquer-force") (list "reorder" "reorder"))))) (om-make-point 31 157) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote nil) nil 7.04))
