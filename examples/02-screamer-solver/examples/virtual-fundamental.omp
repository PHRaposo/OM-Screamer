; OM File Header - Saved 2024/09/04 06:55:16
; (7.04 :patc (om-make-point 48 434) (om-make-point 609 87) (om-make-point 624 653) "" 183 0 nil "2024/09/04 06:55:16")
; End File Header
(in-package :om)(load-lib-for (quote ("OM-Screamer")))(setf *om-current-persistent* (om-load-patch1 "virtual-fundamental" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 383 78) (om-make-point 170 30) "divide-and-conquer-force" "\"divide-and-conquer-force\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 354 49) (om-make-point 39 30) ">" "\">\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 297 13) (om-make-point 89 30) "(< x 1e-6)" "\"(< x 1e-6)\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 231 46) (om-make-point 97 30) "domain-size" "\"domain-size\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 199 75) (om-make-point 71 30) "reorder" "\"reorder\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SCREAMER-SOLVER" (quote screamer-solver) (quote ((om-load-inputfun (quote input-funbox) "variable or list" "VARIABLES" nil) (om-load-inputkeyword (quote input-keyword) "constraint<lambda-patch> or list" "constraints" (quote :constraints) nil nil) (om-load-inputkeyword (quote input-keyword) "one-value, all-values, listener, n-values, ith-value or best-value" "screamer-valuation" (quote :screamer-valuation) "one-value" (list (list "one-value" "one-value") (list "all-values" "all-values") (list "listener" "listener") (list "n-values" (list (quote list) "n-values" 10)) (list "ith-value" (list (quote list) "ith-value" 10)) (list "best-value" "best-value"))) (om-load-inputkeyword (quote input-keyword) "ordering-force-functions" "force-function" (quote :force-function) "static-ordering linear-force" nil) (om-load-inputkeyword (quote input-keyword) "symbol or list" "output" (quote :output) nil nil) (om-load-inputkeyword (quote input-keyword) "<lambda-patch>" "objective-form" (quote :objective-form) nil nil))) (om-make-point 193 244) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "construct-chord" (om-load-patch-abs1 "construct-chord" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 104 369) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 173 17) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil))) (om-make-point 100 229) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "F->MC" (quote f->mc) (quote ((om-load-inputfun (quote input-funbox) "frequency (Hz)" "FREQ" 440))) (om-make-point 107 303) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 227 118) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 180 177) (om-make-point 23 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 99 118) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (6 0 2 0 nil 0) (5 0 2 1 nil 0) (2 0 3 0 nil 0) (1 0 4 0 nil 0) (6 0 5 0 nil 0) (4 0 5 1 nil 0) (1 0 6 0 nil 0))) 7.04 nil "" (om-make-point 200 200) (om-make-point 307 467)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 956/5 1651/5) nil (list (list 2650 6018 6250 6636 6802 7090 7338 7748 7920)) nil "construct-chord"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 28 409) (om-make-point 470 191) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((2650) (6018) (6250) (6636) (6802) (7090) (7338) (7748) (7920))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000 8000 9000)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (measure onset approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list nil nil 4 24 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 507 302) (om-make-point 400 23) 0 1 (quote :normal) (quote t) nil)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 351 193) (om-make-point 37 30) (list 2) "(2)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 193 136) (om-make-point 88 30) "best-value" "\"best-value\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "domain" (om-load-patch-abs1 "domain" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 195 150) (om-make-point 121 30) "a-real-betweenv" "\"a-real-betweenv\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 417 161) (om-make-point 94 30) "an-integerv" "\"an-integerv\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LIST-OFVS" (quote list-ofvs) (quote ((om-load-inputfun (quote input-funbox) "integer" "N-VARS" 3) (om-load-inputfunmenu1 (quote input-funmenu) "screamer-variable" "VARIABLES" "an-integerv" (list (list "an-integer-betweenv" "an-integer-betweenv") (list "a-member-ofv" "a-member-ofv") (list "a-random-member-ofv" "a-random-member-ofv") (list "an-integerv" "an-integerv") (list "an-integer-abovev" "an-integer-abovev") (list "an-integer-belowv" "an-integer-belowv") (list "a-realv" "a-realv") (list "a-real-abovev" "a-real-abovev") (list "a-real-belowv" "a-real-belowv") (list "a-real-betweenv" "a-real-betweenv") (list "a-numberv" "a-numberv") (list "a-booleanv" "a-booleanv"))))) (om-make-point 371 202) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil))) (om-make-point 305 139) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SCREAMER-VARIABLE" (quote screamer-variable) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "screamer-variable" "VAR" "a-real-betweenv" (list (list "an-integer-betweenv" "an-integer-betweenv") (list "a-member-ofv" "a-member-ofv") (list "a-random-member-ofv" "a-random-member-ofv") (list "an-integerv" "an-integerv") (list "an-integer-abovev" "an-integer-abovev") (list "an-integer-belowv" "an-integer-belowv") (list "a-realv" "a-realv") (list "a-real-abovev" "a-real-abovev") (list "a-real-belowv" "a-real-belowv") (list "a-real-betweenv" "a-real-betweenv") (list "a-numberv" "a-numberv") (list "a-booleanv" "a-booleanv"))) (om-load-inputfun (quote input-funbox) "list" "ARGS" (list 0 10)))) (om-make-point 239 204) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 307 394) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "approx" 1 (om-make-point 458 220) "" "approx" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "chord" 0 (om-make-point 372 1) "" "chord" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 289 103) (om-make-point 34 30) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SORT-LIST" (quote sort-list) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 16 76) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 368 150) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MC->F" (quote mc->f) (quote ((om-load-inputfun (quote input-funbox) "pitch or pitch list (midicents)" "MIDICS?" 6000))) (om-make-point 18 230) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 311 318) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 332 85) (om-make-point 30 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((10 0 2 0 nil 0) (1 0 2 1 nil 0) (8 0 3 0 nil 0) (13 0 3 1 nil 0) (0 0 4 0 nil 0) (3 0 4 1 nil 0) (12 0 5 0 nil 0) (7 0 9 0 nil 0) (7 0 10 0 nil 0) (9 0 11 0 nil 0) (11 0 12 0 nil 0) (4 0 12 1 nil 0) (2 0 12 2 nil 0) (6 0 12 3 nil 0) (11 0 13 0 nil 0))) 7.04 nil "" (om-make-point 200 200) (om-make-point 684 512)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 259/4 1245/8) nil (list (list (list 261.62555 293.66476 369.99442 415.3047 493.8833 554.3653 698.4565 783.99085) nil (list nil nil nil nil nil nil nil nil) 4)) nil "domain"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "objective-form" (om-load-patch-abs1 "objective-form" (quote ((let ((box (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 82 120) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 79 286) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "vars" 0 (om-make-point 91 39) "" "vars" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "+V" (quote screamer:+v) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 90 184) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (3 0 1 0 nil 0) (0 0 3 0 nil 0))) 7.04 nil "" (om-make-point 200 200) (om-make-point 358 409)) (quote ((om-load-inputfun (quote input-funbox) "" "vars" nil))) (om-make-point 381 172) nil (list nil) "l" "objective-form"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 111 114) (om-make-point 27 30) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FORCE-FUNCTION 2" (quote force-function) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "ordering-force-functions" "FORCE-FUNCTION" "reorder" (list (list "static-ordering linear-force" "static-ordering linear-force") (list "static-ordering divide-and-conquer-force" "static-ordering divide-and-conquer-force") (list "reorder" "reorder"))) (om-load-inputkeyword (quote input-keyword) "domain-size or range-size" "COST-FUNCTION" (quote :cost-function) "domain-size" nil) (om-load-inputkeyword (quote input-keyword) "terminate-function" "TERMINATE?" (quote :terminate?) "(< x 1e-6)" nil) (om-load-inputkeyword (quote input-keyword) "> or <" "ORDER" (quote :order) ">" nil) (om-load-inputkeyword (quote input-keyword) "linear-force or divide-and-conquer-force" "REORDER-FORCE-FUNCTION" (quote :reorder-force-function) "divide-and-conquer-force" nil))) (om-make-point 297 119) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 26 48) (om-make-point 60 90) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 6200 6600 6800 7100 7300 7700 7900)) :ldur (quote (1000 1000 1000 1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (measure onset approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list nil nil 8 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 3 (om-make-point 576 247) (om-make-point 400 23) 0 0 (quote :normal) (quote t) nil)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "closest-partialsv" (om-load-patch-abs1 "closest-partialsv" (quote ((let ((box (om-load-boxcall (quote abstraction) "closest-partial 2" (om-load-patch-abs1 "closest-partial" (quote ((let ((box (om-load-boxcall (quote lispfun) "ANDV" (quote screamer:andv) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 403 437) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ASSERT!" (quote screamer:assert!) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 396 508) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 544 110) (om-make-point 46 30) 1/12 "1/12" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "* 2" (quote *) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 571 151) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EXPT 2" (quote expt) (quote ((om-load-inputfun (quote input-funbox) "B" "B" nil) (om-load-inputfun (quote input-funbox) "P" "P" nil))) (om-make-point 560 201) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 520 142) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "/" (quote /) (quote ((om-load-inputfun (quote input-funbox) "NUM" "NUM" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 615 93) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "<=V" (quote screamer:<=v) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 478 378) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) ">=V" (quote screamer:>=v) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 354 379) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "approx" 3 (om-make-point 620 5) "" "approx" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "partial" 2 (om-make-point 409 11) "" "partial" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "fund" 1 (om-make-point 281 10) "" "fund" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 395 593) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "/V 4" (quote screamer:/v) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 313 314) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "/V 3" (quote screamer:/v) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 252 314) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "/V 2" (quote screamer:/v) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 146 253) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "*V 2" (quote screamer:*v) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 220 255) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 589 58) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "nf" 0 (om-make-point 145 13) "" "nf" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((8 0 0 0 nil 0) (7 0 0 1 nil 0) (0 0 1 0 nil 0) (2 0 3 0 nil 0) (6 0 3 1 nil 0) (5 0 4 0 nil 0) (3 0 4 1 nil 0) (17 0 6 0 nil 0) (9 0 6 1 nil 0) (10 0 7 0 nil 6) (13 0 7 1 nil 1) (10 0 8 0 nil 6) (14 0 8 1 nil 1) (1 0 12 0 nil 0) (16 0 13 0 nil 0) (11 0 13 1 nil 3) (15 0 14 0 nil 0) (11 0 14 1 nil 3) (18 0 15 0 nil 1) (4 0 15 1 nil 2) (18 0 16 0 nil 1) (4 0 16 1 nil 2))) 7.04 nil "" (om-make-point 166 95) (om-make-point 860 634)) (quote ((om-load-inputfun (quote input-funbox) "" "nf" nil) (om-load-inputfun (quote input-funbox) "" "fund" nil) (om-load-inputfun (quote input-funbox) "" "partial" nil) (om-load-inputfun (quote input-funbox) "" "approx" nil))) (om-make-point 61 288) nil (list nil) "l" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCARV" (quote screamer+:mapcarv) (quote ((om-load-inputfun (quote input-funbox) "F" "F" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 211 368) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FOURTH" (quote fourth) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 330 109) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "THIRD" (quote third) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 238 110) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 126 109) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 40 108) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 215 430) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "nf-fund-part-appr" 0 (om-make-point 151 4) "" "nf-fund-part-appr" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 0 1 nil 0) (2 0 0 3 nil 0) (0 0 1 0 nil 0) (5 0 1 1 nil 0) (3 0 1 2 nil 0) (7 0 2 0 nil 0) (7 0 3 0 nil 0) (7 0 4 0 nil 0) (7 0 5 0 nil 0) (1 0 6 0 nil 0))) 7.04 nil "" (om-make-point 274 79) (om-make-point 512 569)) (quote ((om-load-inputfun (quote input-funbox) "" "nf-list" nil))) (om-make-point 113 138) nil (list nil) "l" "closest-partialsv"))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((10 0 5 0 nil 0) (15 0 5 1 nil 0) (9 0 5 2 nil 0) (13 0 5 3 nil 0) (8 0 5 4 nil 0) (11 0 5 5 nil 0) (5 0 6 0 nil 0) (6 0 7 1 nil 0) (14 1 10 0 nil 0) (12 0 10 1 nil 0) (4 0 13 0 nil 0) (3 0 13 1 nil 0) (2 0 13 2 nil 0) (1 0 13 3 nil 0) (0 0 13 4 nil 0))) nil 7.04))
