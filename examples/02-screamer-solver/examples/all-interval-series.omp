; OM File Header - Saved 2025/09/25 11:28:04
; (7.06 :patc (om-make-point 55 194) (om-make-point 343 178) (om-make-point 589 386) "" 183 0 nil "2025/09/25 11:28:04")
; End File Header
; External resources 
; (list (list (quote :abstraction) "#P\"C:../tools/all-different.omp\""))
(in-package :om)(load-lib-for (quote ("OM-Screamer")))(setf *om-current-persistent* (om-load-patch1 "all-interval-series" (quote ((let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 214 379) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 106 12) (om-make-point 110 30) "a-member-ofv" "\"a-member-ofv\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LIST-OFVS" (quote list-ofvs) (quote ((om-load-inputfun (quote input-funbox) "integer" "N-VARS" 3) (om-load-inputfunmenu1 (quote input-funmenu) "screamer-variable" "VARIABLES" "a-member-ofv" (list (list "an-integer-betweenv" "an-integer-betweenv") (list "a-member-ofv" "a-member-ofv") (list "a-random-member-ofv" "a-random-member-ofv") (list "an-integerv" "an-integerv") (list "an-integer-abovev" "an-integer-abovev") (list "an-integer-belowv" "an-integer-belowv") (list "a-realv" "a-realv") (list "a-real-abovev" "a-real-abovev") (list "a-real-belowv" "a-real-belowv") (list "a-real-betweenv" "a-real-betweenv") (list "a-numberv" "a-numberv") (list "a-booleanv" "a-booleanv"))) (om-load-inputfun (quote input-funbox) "list" "ARGS" (list 0 10)))) (om-make-point 133 80) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SCREAMER-SOLVER" (quote screamer-solver) (quote ((om-load-inputfun (quote input-funbox) "variable or list" "VARIABLES" nil) (om-load-inputkeyword (quote input-keyword) "propagation-variables<lambda-patch>" "P-VARIABLES" (quote :p-variables) nil nil) (om-load-inputkeyword (quote input-keyword) "constraint<lambda-patch> or list" "CONSTRAINTS" (quote :constraints) nil nil) (om-load-inputkeyword (quote input-keyword) "propagation-constraints<lambda-patch>" "P-CONSTRAINTS" (quote :p-constraints) nil nil) (om-load-inputkeyword (quote input-keyword) "one-value, all-values, listener, n-values, ith-value or best-value" "SCREAMER-VALUATION" (quote :screamer-valuation) "all-values" nil) (om-load-inputkeyword (quote input-keyword) "ordering-force-functions" "FORCE-FUNCTION" (quote :force-function) "static-ordering linear-force" nil))) (om-make-point 191 271) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "all-differentv 2" (om-load-patch-abs1 "all-differentv" (quote ((let ((box (om-load-boxcall (quote patch-box) "all-different" (quote ("elements" "OM-Screamer-tutorial-patches" "02-screamer-solver" "tools" "all-different")) (quote ((om-load-inputfun (quote input-funbox) "" "x" nil) (om-load-inputfun (quote input-funbox) "" "xs" nil))) (om-make-point 138 215) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 150 342) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CDR" (quote cdr) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 216 110) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CAR" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 118 110) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 167 0) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (2 0 0 1 nil 0) (0 0 1 0 nil 0) (4 0 2 0 nil 0) (4 0 3 0 nil 0))) 7.06 nil "" (om-make-point 200 200) (om-make-point 370 446)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 299 183) nil (list nil) "l" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "intervals-mod12" (om-load-patch-abs1 "intervals-mod12" (quote ((let ((box (om-load-boxcall (quote genfun) "X->DXV" (quote x->dxv) (quote ((om-load-inputfun (quote input-funbox) "variable or list of variables" "LISTV" (list 1 2 3 4 5)))) (om-make-point 117 92) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MOD12V" (quote mod12v) (quote ((om-load-inputfun (quote input-funbox) "" "LST" nil))) (om-make-point 115 166) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 115 256) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 125 11) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (0 0 1 0 nil 0) (1 0 2 0 nil 0))) 7.06 nil "" (om-make-point 200 200) (om-make-point 500 360)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 199 166) nil (list nil) "l" "intervals-mod12"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 180 161) (om-make-point 27 30) 6 "6" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 114 163) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil) (om-load-inputfun (quote input-funbox) "additional elements" "LST?" nil))) (om-make-point 127 202) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 169 42) (om-make-point 149 30) (list 11 10 9 8 7 5 4 3 2 1) "(11 10 9 8 7 5 4 3 2 1)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 113 49) (om-make-point 34 30) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (10 0 2 0 nil 0) (1 0 2 1 nil 0) (9 0 2 2 nil 0) (8 0 3 0 nil 0) (5 0 3 1 nil 0) (4 0 3 2 nil 0) (4 0 3 3 nil 0) (7 0 8 0 nil 0) (2 0 8 1 nil 0) (6 0 8 2 nil 0))) nil 7.06))
