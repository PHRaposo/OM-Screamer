; OM File Header - Saved 2024/12/30 12:30:54
; (7.05 :patc (om-make-point 236 147) (om-make-point 50 50) (om-make-point 925 400) "" 183 0 nil "2024/12/30 11:03:54")
; End File Header
(in-package :om)(load-lib-for (quote ("OM-Screamer")))(setf *om-current-persistent* (om-load-patch1 "01-scs" (quote ((let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 649 30) (om-make-point 143 30) (list 6000 6700 6400 7100) "(6000 6700 6400 7100)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 744 66) (om-make-point 59 30) "midic" "\"midic\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "NORMAL-ORDER" (quote om-screamer::normal-order) (quote ((om-load-inputfun (quote input-funbox) "list of midics or pitch classes" "INPUT" (list 6000 6700 6400 7100)) (om-load-inputfunmenu1 (quote input-funmenu) "pc or midic" "MODE" "midic" (list (list "midic" "midic") (list "pc" "pc"))))) (om-make-point 692 108) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 11" (quote t) (quote nil) (om-make-point 757 214) (om-make-point 48 30) "pcs" "\"pcs\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 661 214) (om-make-point 77 30) (list 0 7 4 11) "(0 7 4 11)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "NORMAL-ORDER 2" (quote om-screamer::normal-order) (quote ((om-load-inputfun (quote input-funbox) "list of midicents or pitch classes" "INPUT" (list 6000 6700 6400 7100)) (om-load-inputfunmenu1 (quote input-funmenu) "pcs or midics" "MODE" "pcs" (list (list "midics" "midics") (list "pcs" "pcs"))))) (om-make-point 695 266) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 515 206) (om-make-point 63 30) (quote |6-27A|) "|6-27A|" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 490 71) (om-make-point 121 30) (list (quote |6-27A|) (quote |6-27B|)) "(|6-27A| |6-27B|)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 377 68) (om-make-point 71 30) (quote |4-Z15A|) "|4-Z15A|" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 283 68) (om-make-point 71 30) (quote |4-Z15A|) "|4-Z15A|" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 219 75) (om-make-point 27 30) 6 "6" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 119 69) (om-make-point 90 30) (list 6000 6100) "(6000 6100)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 19 66) (om-make-point 90 30) (list 6000 6100) "(6000 6100)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SC-SUBSETS" (quote om-screamer::sc-subsets) (quote ((om-load-inputfun (quote input-funbox) "fn symbol" "FN" (list (quote |6-27A|) (quote |6-27B|))))) (om-make-point 501 108) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SC-SUBSETS 2" (quote om-screamer::sc-subsets) (quote ((om-load-inputfun (quote input-funbox) "fn symbol" "FN" (quote |6-27A|)))) (om-make-point 512 244) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SUB/SUPERSETS" (quote om-screamer::sub/supersets) (quote ((om-load-inputfun (quote input-funbox) "SC" "SC" (quote |4-Z15A|)) (om-load-inputfun (quote input-funbox) "card" "CARD" 9))) (om-make-point 364 109) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SC-INFO" (quote om-screamer::sc-info) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "mode" "MODE" (quote :prime) (list (list "prime" (quote :prime)) (list "icv" (quote :icv)) (list "member-sets" (quote :member-sets)) (list "complement-pcs" (quote :complement-pcs)))) (om-load-inputfun (quote input-funbox) "SC" "SC" (quote |4-Z15A|)))) (om-make-point 287 112) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SCS-CARD" (quote om-screamer::scs-card) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "integer" "CARD" 6 (list (list "1" 1) (list "2" 2) (list "3" 3) (list "4" 4) (list "5" 5) (list "6" 6) (list "7" 7) (list "8" 8) (list "9" 9) (list "10" 10) (list "11" 11) (list "12" 12))))) (om-make-point 200 113) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SC+OFF" (quote om-screamer::sc+off) (quote ((om-load-inputfun (quote input-funbox) "midics" "MIDICS" (list 6000 6100)))) (om-make-point 117 111) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SC-NAME" (quote om-screamer::sc-name) (quote ((om-load-inputfun (quote input-funbox) "midics" "MIDICS" (list 6000 6100)))) (om-make-point 34 109) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((0 0 2 0 nil 0) (1 0 2 1 nil 0) (4 0 5 0 nil 0) (3 0 5 1 nil 0) (7 0 13 0 nil 0) (6 0 14 0 nil 0) (8 0 15 0 nil 0) (9 0 16 1 nil 0) (10 0 17 0 nil 0) (11 0 18 0 nil 0) (12 0 19 0 nil 0))) nil 7.05))
