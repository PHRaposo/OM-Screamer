; OM File Header - Saved 2024/04/10 20:49:39
; (7.02 :patc (om-make-point 16 14) (om-make-point 23 54) (om-make-point 1141 599) "" 183 0 nil "2024/04/10 14:20:05")
; End File Header
(in-package :om)(load-lib-for (quote ("OM-Screamer")))(setf *om-current-persistent* (om-load-patch1 "01-main-functions" (quote ((let ((box (om-load-boxcall (quote genfun) "CONSTRAINT-HARMONY" (quote constraint-harmony) (quote ((om-load-inputfun (quote input-funbox) "<lambda-patch>" "CONSTRAINT" nil) (om-load-inputfunmenu1 (quote input-funmenu) "constraint-mode" "CONSTRAINT-MODE" "list" (list (list "list" "list") (list "n-inputs" "n-inputs") (list "car-cdr" "car-cdr"))) (om-load-inputfunmenu1 (quote input-funmenu) "input-mode" "INPUT-MODE" "all-voices" (list (list "all-voices" "all-voices") (list "voices-list" "voices-list"))) (om-load-inputfunmenu1 (quote input-funmenu) "beats-option" "BEATS" "all" (list (list "all" "all") (list "on-beat" "on-beat") (list "off-beat" "off-beat") (list "1st-beat" "1st-beat"))))) (om-make-point 337 148) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "BPF-LIB-FROM-POLY" (quote bpf-lib-from-poly) (quote ((om-load-inputfun (quote input-funbox) "poly object" "POLY-OBJ" nil))) (om-make-point 973 255) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CUBIC-BEZIER" (quote cubic-bezier) (quote ((om-load-inputfun (quote input-funbox) "number" "P0" 3600) (om-load-inputfun (quote input-funbox) "number" "P1" 2100) (om-load-inputfun (quote input-funbox) "number" "P2" 8400) (om-load-inputfun (quote input-funbox) "number" "P3" 6000) (om-load-inputfun (quote input-funbox) "integer" "STEPS" 20))) (om-make-point 985 172) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "QUADRATIC-BEZIER" (quote quadratic-bezier) (quote ((om-load-inputfun (quote input-funbox) "number" "P0" 6000) (om-load-inputfun (quote input-funbox) "number" "P1" 4800) (om-load-inputfun (quote input-funbox) "number" "P2" 7400) (om-load-inputfun (quote input-funbox) "integer" "STEPS" 20))) (om-make-point 968 74) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "NOT-PARALLEL-FIFTHS-OCTAVES" (quote not-parallel-fifths-octaves) (quote ((om-load-inputfun (quote input-funbox) "list" "VOICES-LIST" (list (list 0 1) (list 0 2))))) (om-make-point 745 250) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "NO-CROSSING-VOICES" (quote no-crossing-voices) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "all-voices/voices-list" "INPUT-MODE" "all-voices" (list (list "all-voices" "all-voices") (list "voices-list" "voices-list"))) (om-load-inputfunmenu1 (quote input-funmenu) "yes/no" "UNISON?" "no" (list (list "no" "no") (list "yes" "yes"))))) (om-make-point 573 253) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CONSTRAINT-CHORDS-ALLDIFF-NOTES" (quote constraint-chords-alldiff-notes) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "midics/pcs" "MODE" "midics" (list (list "midics" "midics") (list "pcs" "pcs"))) (om-load-inputfunmenu1 (quote input-funmenu) "all-voices/voices-list" "INPUT-MODE" "all-voices" (list (list "all-voices" "all-voices") (list "voices-list" "voices-list"))))) (om-make-point 735 153) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CONSTRAINT-SCALE-ONE-VOICE" (quote constraint-scale-one-voice) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "midics/pcs" "MODE" "midics" (list (list "midics" "midics") (list "pcs" "pcs"))) (om-load-inputfun (quote input-funbox) "list" "SCALE" (list 0 200 400 500 700 900 1100 1200)) (om-load-inputfun (quote input-funbox) "list" "VOICES-LIST" (list 0)))) (om-make-point 546 153) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PCSET-EQUALV" (quote pcset-equalv) (quote ((om-load-inputfun (quote input-funbox) "midics" "DOMAIN-LIST" (list 6000 6400 6700)) (om-load-inputfun (quote input-funbox) "pcset list" "PCSET" (list 0 4 7)))) (om-make-point 786 55) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CONTAIN-RESTS?" (quote contain-rests?) (quote ((om-load-inputfun (quote input-funbox) "domain-list" "DOMAIN-LIST" (list 6000 nil nil (list (quote screamer:an-integerv)))))) (om-make-point 684 54) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CONTAIN-VARIABLES?" (quote contain-variables?) (quote ((om-load-inputfun (quote input-funbox) "domain-list" "DOMAIN-LIST" (list 6000 nil nil (list (quote screamer:an-integerv)))))) (om-make-point 565 52) nil nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CONSTRAINT-PROFILE" (quote constraint-profile) (quote ((om-load-inputfun (quote input-funbox) "bpf or bpf-lib" "BPF-OBJECT" nil) (om-load-inputfun (quote input-funbox) "number or list of voice numbers" "VOICES" (list 0)) (om-load-inputfun (quote input-funbox) "midics" "APPROX" 400) (om-load-inputfunmenu1 (quote input-funmenu) "string" "RANGE" "voice-range" (list (list "voice-range" "voice-range") (list "all" "all"))))) (om-make-point 343 249) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CONSTRAINT-ONE-VOICE 2" (quote constraint-one-voice) (quote ((om-load-inputfun (quote input-funbox) "<lambda-patch>" "CONSTRAINT" nil) (om-load-inputfunmenu1 (quote input-funmenu) "list" "CONSTRAINT-MODE" "list" (list (list "list" "list") (list "n-inputs" "n-inputs") (list "car-cdr" "car-cdr"))) (om-load-inputfun (quote input-funbox) "list-of-voice-numbers" "VOICES" (list 0 1)) (om-load-inputfunmenu1 (quote input-funmenu) "string" "DOMAIN" "pitch" (list (list "pitch" "pitch") (list "pitch+dur" "pitch+dur") (list "pitch+onset" "pitch+onset") (list "pitch+dur+onset" "pitch+dur+onset"))))) (om-make-point 334 49) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CONSTRAINT-MEASURE" (quote constraint-measure) (quote ((om-load-inputfun (quote input-funbox) "screamer-score-constraints or list of constraints" "CONSTRAINTS" nil) (om-load-inputfun (quote input-funbox) "measure number or list of numbers" "MEASURE-NUMBER" 0))) (om-make-point 339 358) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SCREAMER-SCORE-DOMAIN" (quote screamer-score-domain) (quote ((om-load-inputfun (quote input-funbox) "midics-list" "DOMAIN" (list 6000 6200 6400 6500 6700 6900 7100 7200)) (om-load-inputfunmenu1 (quote input-funmenu) "domain-type" "TYPE" "notes" (list (list "notes" "notes") (list "chords" "chords"))))) (om-make-point 150 152) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SCREAMER-SCORE" (quote screamer-score) (quote ((om-load-inputfun (quote input-funbox) "voice" "POLY-OBJECT" nil) (om-load-inputfun (quote input-funbox) "screamer-score-domain or list of domains" "DOMAINS" nil) (om-load-inputfun (quote input-funbox) "list of screamer-score-constraints" "SCORE-CONSTRAINTS" nil) (om-load-inputfun (quote input-funbox) "ordering-force-functions" "FORCE-FUNCTION" "static-ordering linear-force") (om-load-inputfunmenu1 (quote input-funmenu) "t or nil" "RANDOM?" (quote t) (list (list "t" (quote t)) (list "nil" nil))))) (om-make-point 21 153) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote nil) nil 7.02))
